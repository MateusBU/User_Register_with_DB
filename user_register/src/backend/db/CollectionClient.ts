import Client from "../../core/Client";
import ClientRepository from "../../core/ClientRepository";
import { getFirestore, collection, CollectionReference, DocumentData, QueryDocumentSnapshot, SnapshotOptions, doc, deleteDoc, setDoc, addDoc, getDoc, getDocs } from "firebase/firestore";
import app from "../config";

export default class CollectionClient implements ClientRepository{
    // Firestore instance
    #db = getFirestore(app);

    // Firestore data converter
    #converter = { //private
        //transform a class (Client) to an object, and it is gonna be interpretated by the firebase
        toFirestore(client: Client): DocumentData{
            return{
                name: client.name,
                age: client.age,
            }
        },
        //receive data from firebase
        fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): Client{
            const data = snapshot.data(options);
            return new Client(data.name, data.age, snapshot?.id); //The ID is generated by Firebase
        }
    }
    async save(client: Client): Promise<Client>{
        if(client?.id){
            const clientDoc = doc(this.#collectionFirebase(), client.id);
            await setDoc(clientDoc, client);
            return client;
        }
        else{ //add client, and return the object with the id created by Firebase
            const docRef = await addDoc(this.#collectionFirebase(), client); // Auto-generated ID
            const doc = await getDoc(docRef);
            return doc.data(); //Client
        }
    }

    async delete(client: Client): Promise<Client> {//to access a client by his ID use doc
        const clientDoc = doc(this.#collectionFirebase(), client.id);
        await deleteDoc(clientDoc);
        return client;
    }

    async getAll(): Promise<Client[]> {
        const querySnapshot = await getDocs(this.#collectionFirebase());
        return querySnapshot.docs.map(doc => doc.data()) ?? [];
    }
    // Get typed collection reference
    #collectionFirebase(): CollectionReference<Client> {
        return collection(this.#db, "clients").withConverter(this.#converter);
    }
}